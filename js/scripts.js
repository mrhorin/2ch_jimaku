// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.ThreadController = (function() {
  function ThreadController(thread, threadView, jimakuView) {
    this.switchClassAir = __bind(this.switchClassAir, this);
    this.jimakuClockOff = __bind(this.jimakuClockOff, this);
    this.jimakuClockOn = __bind(this.jimakuClockOn, this);
    this.jimakuLoadOn = __bind(this.jimakuLoadOn, this);
    this.resLoadOff = __bind(this.resLoadOff, this);
    this.resLoadOn = __bind(this.resLoadOn, this);
    this.printJimakuResCount = __bind(this.printJimakuResCount, this);
    this.printResToJimaku = __bind(this.printResToJimaku, this);
    this.printSubjectToJimaku = __bind(this.printSubjectToJimaku, this);
    this.onResizeJimaku = __bind(this.onResizeJimaku, this);
    this.onMoveJimaku = __bind(this.onMoveJimaku, this);
    this.jimakuCompleteHandler = __bind(this.jimakuCompleteHandler, this);
    var req;
    this.thread = thread;
    this.threadView = threadView;
    this.jimakuView = jimakuView;
    this.resLoadTimer = null;
    this.jimakuPrintTimer = null;
    this.clock = null;
    this.jimakuBody = null;
    this.jimakuTitle = null;
    this.jimakuSubject = null;
    this.jimakuClock = null;
    this.jimakuCount = null;
    this.jimakuRes = null;
    this.jimakuResQueue = [];
    this.jimakuCompleteFlag = false;
    this.jimakuLoadFlag = false;
    this.airFlag = false;
    req = new this.jimakuView.air.URLRequest("../../sound/sound.mp3");
    this.sound = new air.Sound(req);
    this.jimakuInitialize();
  }

  ThreadController.prototype.jimakuInitialize = function() {
    return this.jimakuView.html.addEventListener("complete", this.jimakuCompleteHandler);
  };

  ThreadController.prototype.jimakuCompleteHandler = function() {
    this.jimakuTitle = this.jimakuView.html.window.document.getElementById("jimaku-title");
    this.jimakuSubject = this.jimakuView.html.window.document.getElementById("jimaku-subject");
    this.jimakuBody = this.jimakuView.html.window.document.getElementById("jimaku-body");
    this.jimakuClock = this.jimakuView.html.window.document.getElementById("jimaku-clock");
    this.jimakuCount = this.jimakuView.html.window.document.getElementById("jimaku-count");
    this.jimakuRes = this.jimakuView.html.window.document.getElementById("jimaku-res");
    if (this.jimakuSubject != null) {
      this.jimakuTitle.addEventListener("mousedown", this.onMoveJimaku, true);
      window.nativeWindow.addEventListener(this.jimakuView.air.Event.CLOSING, (function(_this) {
        return function() {
          return _this.jimakuView.air.NativeApplication.nativeApplication.exit();
        };
      })(this));
      this.jimakuBody.addEventListener("mousedown", this.onResizeJimaku, true);
      this.printSubjectToJimaku(this.jimakuSubject);
      this.printJimakuResCount();
    }
    if (this.jimakuClock != null) {
      return this.jimakuClockOn();
    }
  };

  ThreadController.prototype.onMoveJimaku = function(event) {
    return this.jimakuView.jimaku.startMove();
  };

  ThreadController.prototype.onResizeJimaku = function(event) {
    return this.jimakuView.jimaku.startResize("BR");
  };

  ThreadController.prototype.printSubjectToJimaku = function(subject) {
    this.thread.clickedThread["title"] = this.thread.clickedThread["title"].replace(/\(\d+\)$/, "");
    return subject.innerHTML = this.thread.clickedThread["title"];
  };

  ThreadController.prototype.printResToJimaku = function(res) {
    if (this.jimakuRes != null) {
      return this.jimakuRes.innerHTML = res;
    }
  };

  ThreadController.prototype.printJimakuResCount = function() {
    if (this.jimakuCount != null) {
      return this.jimakuCount.innerHTML = "(" + this.thread.resCount + ")";
    }
  };

  ThreadController.prototype.checkQueueLength = function(count) {
    var sec;
    switch (false) {
      case !(count <= 1):
        return sec = 10000;
      case !((2 <= count && count <= 3)):
        return sec = 7500;
      case !((4 <= count && count <= 5)):
        return sec = 5000;
      case !((6 <= count && count <= 10)):
        return sec = 3500;
      case !((11 <= count && count <= 15)):
        return sec = 2000;
      case !(16 < count):
        return sec = 1000;
      default:
        return sec = 1000;
    }
  };

  ThreadController.prototype.resLoadOn = function() {
    return this.resLoadTimer = setInterval((function(_this) {
      return function() {
        var res;
        res = _this.thread.getRes();
        if (res) {
          _this.threadView.printRes(res);
          $.each(res, function(index, value) {
            return _this.jimakuResQueue.push(res[index][4]);
          });
          if (!_this.jimakuLoadFlag) {
            return _this.jimakuLoadOn();
          }
        }
      };
    })(this), 7000);
  };

  ThreadController.prototype.resLoadOff = function() {
    clearInterval(this.resLoadTimer);
    return clearTimeout(this.jimakuPrintTimer);
  };

  ThreadController.prototype.jimakuLoadOn = function(sec) {
    if (sec == null) {
      sec = 0;
    }
    this.jimakuLoadFlag = true;
    return this.jimakuPrintTimer = setTimeout((function(_this) {
      return function() {
        var hoge;
        if (_this.jimakuResQueue[0] != null) {
          _this.printJimakuResCount();
          _this.printResToJimaku(_this.jimakuResQueue[0]);
          _this.sound.play();
          _this.jimakuResQueue.shift();
          hoge = _this.checkQueueLength(_this.jimakuResQueue.length);
          return _this.jimakuLoadOn(hoge);
        } else {
          _this.printResToJimaku("");
          _this.jimakuLoadFlag = false;
          return clearTimeout(_this.jimakuPrintTimer);
        }
      };
    })(this), sec);
  };

  ThreadController.prototype.jimakuClockOn = function() {
    return this.clock = setInterval((function(_this) {
      return function() {
        var nowTime;
        nowTime = _this.jimakuView.getNowTime();
        return _this.jimakuClock.innerHTML = nowTime;
      };
    })(this), 1000);
  };

  ThreadController.prototype.jimakuClockOff = function() {
    return clearInterval(this.clock);
  };

  ThreadController.prototype.switchClassAir = function() {
    if (this.airFlag && (this.jimakuBody != null)) {
      this.jimakuBody.className = "";
      return this.airFlag = false;
    } else if (this.jimakuBody != null) {
      this.jimakuBody.className = "bg-air";
      return this.airFlag = true;
    }
  };

  return ThreadController;

})();

$(function() {
  return $("#get-thread").click(function() {
    var bbs, bbsView;
    $("#play").attr('disabled', true);
    bbs = new Bbs($("#url").val());
    bbsView = new BbsView(bbs);
    bbsView.printSubject();
    return $(".thread").click((function(_this) {
      return function() {
        var bbsDb, jimakuView, res, thread, threadController, threadView;
        $("#pause").addClass("on");
        $("#play").attr('disabled', false);
        $("#play").removeAttr('disabled');
        thread = new Thread(bbsView.clickedThread, bbs.url);
        threadView = new ThreadView();
        threadView.sectionToEmpty();
        res = thread.getRes();
        threadView.printRes(res);
        jimakuView = new ThreadJimakuView(air, "../haml/jimaku.html");
        jimakuView.create();
        jimakuView.activate();
        threadController = new ThreadController(thread, threadView, jimakuView);
        bbsDb = new Db(air);
        bbsDb.connect();
        bbsDb.create();
        bbsDb.deleteBbs(4);
        bbsDb.selectBbs();
        $("#play").click(function() {
          if (!thread.resLoadFlag) {
            thread.resLoadFlag = true;
            threadController.resLoadOn();
            $("#play").addClass("on");
            return $("#pause").removeClass("on");
          }
        });
        $("#pause").click(function() {
          if (thread.resLoadFlag) {
            thread.resLoadFlag = false;
            threadController.resLoadOff();
            $("#play").removeClass("on");
            return $("#pause").addClass("on");
          }
        });
        $("#get-thread").click(function() {
          threadController.jimakuView.close();
          threadController.jimakuClockOff();
          if (thread.resLoadFlag) {
            thread.resLoadFlag = false;
            threadController.resLoadOff();
            $("#play").removeClass("on");
            $("#pause").addClass("on");
          }
          return $("#air").removeClass("on");
        });
        return $("#air").click(function() {
          threadController.switchClassAir();
          if (threadController.airFlag) {
            return $("#air").addClass("on");
          } else {
            return $("#air").removeClass("on");
          }
        });
      };
    })(this));
  });
});

window.Bbs = (function() {
  function Bbs(url) {
    this.subjectsToArray = __bind(this.subjectsToArray, this);
    this.getSubjects = __bind(this.getSubjects, this);
    this.url = url;
    this.urlToArray();
    this.getSubjects();
    this.subjectsToArray();
  }

  Bbs.prototype.urlToArray = function() {
    this.url = this.url.split("/");
    this.url = {
      "domain": this.url[2],
      "category": this.url[3],
      "address": this.url[4]
    };
    return this.url["reqSubjectUrl"] = "http://" + this.url["domain"] + "/" + this.url["category"] + "/" + this.url["address"] + "/subject.txt";
  };

  Bbs.prototype.getSubjects = function() {
    return $.ajax({
      async: false,
      beforeSend: (function(_this) {
        return function(xhr) {
          return xhr.overrideMimeType("text/html;charset=EUC-JP");
        };
      })(this),
      type: 'GET',
      url: this.url["reqSubjectUrl"],
      dataType: 'text',
      success: (function(_this) {
        return function(data) {
          if (data) {
            return _this.subjects = data;
          }
        };
      })(this),
      error: function() {
        return alert("スレッド読み込みエラー");
      }
    });
  };

  Bbs.prototype.subjectsToArray = function() {
    var res;
    res = [];
    this.subjects = this.subjects.split("\n");
    $.each(this.subjects, function(index, value) {
      value = value.split(".cgi,");
      return res[index] = {
        "number": value[0],
        "title": value[1]
      };
    });
    this.subjects = res;
    this.subjects.pop();
    return this.subjects.pop();
  };

  return Bbs;

})();

window.Thread = (function() {
  function Thread(clickedThread, bbsUrl) {
    this.getRes = __bind(this.getRes, this);
    this.clickedThread = clickedThread;
    this.clickedThread["ReqUrl"] = "http://" + bbsUrl["domain"] + "/bbs/rawmode.cgi/" + bbsUrl["category"] + "/" + bbsUrl["address"] + "/" + clickedThread["number"] + "/";
    this.bbsUrl = bbsUrl;
    this.resLoadFlag = false;
    this.resCount = 0;
  }

  Thread.prototype.getRes = function() {
    var url;
    if (this.resCount === 0) {
      url = this.clickedThread["ReqUrl"];
    } else {
      url = this.clickedThread["ReqUrl"] + (this.resCount + 1) + "-";
    }
    $.ajax({
      async: false,
      beforeSend: (function(_this) {
        return function(xhr) {
          return xhr.overrideMimeType("text/html;charset=EUC-JP");
        };
      })(this),
      type: 'GET',
      url: url,
      dataType: 'text',
      success: (function(_this) {
        return function(data) {
          if (data) {
            return _this.resToArray(data);
          } else {
            return _this.res = null;
          }
        };
      })(this),
      error: function() {
        return this.res = null;
      }
    });
    return this.res;
  };

  Thread.prototype.resToArray = function(data) {
    this.res = [];
    data = data.split("\n");
    data.pop();
    this.resCount = this.resCount + data.length;
    return $.each(data, (function(_this) {
      return function(index, value) {
        var i, _i, _results;
        _this.res[index] = [];
        value = value.split("<>");
        _results = [];
        for (i = _i = 0; _i <= 4; i = ++_i) {
          _results.push(_this.res[index][i] = value[i]);
        }
        return _results;
      };
    })(this));
  };

  Thread.prototype.loadOn = function() {
    return this.resLoadFlag = true;
  };

  Thread.prototype.loadOff = function() {
    return this.resLoadFlag = false;
  };

  return Thread;

})();

window.BaseView = (function() {
  function BaseView() {}

  BaseView.prototype.sectionToEmpty = function() {
    return $("section").empty();
  };

  return BaseView;

})();

window.BbsView = (function(_super) {
  __extends(BbsView, _super);

  function BbsView(bbs) {
    this.printSubject = __bind(this.printSubject, this);
    this.subjects = bbs.subjects;
    this.url = bbs.url;
  }

  BbsView.prototype.printSubject = function() {
    this.sectionToEmpty();
    $.each(this.subjects, (function(_this) {
      return function(index, value) {
        return $("section").append($("<div class=\"thread\">" + _this.subjects[index]["title"] + "</div>").click(function() {
          return _this.clickedThread = {
            "title": _this.subjects[index]["title"],
            "number": _this.subjects[index]["number"]
          };
        }));
      };
    })(this));
    $(".thread:odd").addClass("odd");
    $(".thread:even").addClass("even");
    return $("#top-most").get(0).scrollIntoView(true);
  };

  return BbsView;

})(BaseView);

window.ThreadJimakuView = (function(_super) {
  __extends(ThreadJimakuView, _super);

  function ThreadJimakuView(air, path) {
    this.htmlResize = __bind(this.htmlResize, this);
    this.air = air;
    this.path = path;
    this.flag = false;
  }

  ThreadJimakuView.prototype.create = function() {
    var options, url;
    url = new this.air.URLRequest(this.path);
    this.html = new this.air.HTMLLoader();
    this.html.paintsDefaultBackground = false;
    this.html.scaleX = 1;
    this.html.scaleY = 1;
    this.html.load(url);
    options = new this.air.NativeWindowInitOptions();
    options.transparent = true;
    options.systemChrome = this.air.NativeWindowSystemChrome.NONE;
    options.type = this.air.NativeWindowType.NORMAL;
    this.jimaku = new this.air.NativeWindow(options);
    this.jimaku.title = "字幕";
    this.jimaku.width = 800;
    this.jimaku.height = 200;
    this.jimaku.addEventListener(this.air.Event.RESIZE, this.htmlResize);
    this.html.width = this.jimaku.width;
    this.html.height = this.jimaku.height;
    this.jimaku.alwaysInFront = true;
    this.jimaku.stage.addChild(this.html);
    this.jimaku.stage.scaleMode = "noScale";
    return this.jimaku.stage.align = "topLeft";
  };

  ThreadJimakuView.prototype.activate = function() {
    this.jimaku.activate();
    return this.flag = true;
  };

  ThreadJimakuView.prototype.close = function() {
    this.jimaku.close();
    return this.flag = false;
  };

  ThreadJimakuView.prototype.htmlResize = function(event) {
    this.html.width = this.jimaku.width;
    return this.html.height = this.jimaku.height;
  };

  ThreadJimakuView.prototype.getNowTime = function() {
    var clock, nowHour, nowMin, nowSec, nowTime;
    nowTime = new Date;
    nowHour = nowTime.getHours();
    nowMin = nowTime.getMinutes();
    nowSec = nowTime.getSeconds();
    if (nowMin < 10) {
      nowMin = "0" + nowMin;
    }
    if (nowSec < 10) {
      nowSec = "0" + nowSec;
    }
    return clock = nowHour + ":" + nowMin + ":" + nowSec;
  };

  return ThreadJimakuView;

})(BaseView);

window.ThreadView = (function(_super) {
  __extends(ThreadView, _super);

  function ThreadView() {
    return ThreadView.__super__.constructor.apply(this, arguments);
  }

  ThreadView.prototype.printRes = function(res) {
    $.each(res, function(index, value) {
      return $("section").append("<div class=\"res\">\n	<div class=\"res-head\">\n		<span class=\"res-no\">\n			" + res[index][0] + "\n		</span>\n		<span class=\"res-name\">\n			" + res[index][1] + "\n		</span>\n		<span class=\"res-date\">\n			" + res[index][3] + "\n		</span>\n	</div>\n	<div class=\"res-body\">\n		" + res[index][4] + "\n	</div>\n</div>");
    });
    return $("#bottom-most").get(0).scrollIntoView(true);
  };

  return ThreadView;

})(BaseView);

window.Db = (function() {
  function Db(air) {
    this.connect = __bind(this.connect, this);
    this.air = air;
  }

  Db.prototype.connect = function() {
    var dbFile, error;
    this.bbses = new this.air.SQLConnection();
    dbFile = this.air.File.applicationStorageDirectory.resolvePath("bbs.db");
    try {
      return this.bbses.open(dbFile, this.air.SQLMode.CREATE);
    } catch (_error) {
      error = _error;
      this.air.trace("Error message:", error.message);
      return this.air.trace("Details:", error.details);
    }
  };

  Db.prototype.create = function() {
    var createBbs, error, sql;
    createBbs = new this.air.SQLStatement();
    createBbs.sqlConnection = this.bbses;
    sql = "CREATE TABLE IF NOT EXISTS bbses (\n	id INTEGER PRIMARY KEY AUTOINCREMENT,\n	name TEXT,\n	url TEXT\n	)";
    createBbs.text = sql;
    try {
      createBbs.execute();
      return air.trace("Table created");
    } catch (_error) {
      error = _error;
      this.air.trace("Error message:", error.message);
      return this.air.trace("Details:", error.details);
    }
  };

  Db.prototype.insertBbs = function(name, url) {
    var error, insertBbsStmt, sql;
    insertBbsStmt = new this.air.SQLStatement();
    insertBbsStmt.sqlConnection = this.bbses;
    sql = "INSERT INTO bbses (name, url) VALUES ('" + name + "', '" + url + "')";
    insertBbsStmt.text = sql;
    try {
      insertBbsStmt.execute();
      return this.air.trace("INSERT statement succeeded");
    } catch (_error) {
      error = _error;
      this.air.trace("Error message:", error.message);
      return this.air.trace("Details:", error.details);
    }
  };

  Db.prototype.selectBbs = function() {
    var error, result, selectBbsStmt, sql;
    selectBbsStmt = new this.air.SQLStatement();
    selectBbsStmt.sqlConnection = this.bbses;
    sql = "SELECT * FROM bbses";
    selectBbsStmt.text = sql;
    try {
      selectBbsStmt.execute();
      result = selectBbsStmt.getResult();
      this.bbsList = result.data;
      this.air.trace("SELECT statement succeeded");
      return this.air.Introspector.Console.log(result.data);
    } catch (_error) {
      error = _error;
      this.air.trace("Error message:", error.message);
      return this.air.trace("Details:", error.details);
    }
  };

  Db.prototype.deleteBbs = function(id) {
    var deleteBbsStmt, erorr, sql;
    deleteBbsStmt = new this.air.SQLStatement();
    deleteBbsStmt.sqlConnection = this.bbses;
    sql = "DELETE FROM bbses WHERE id = " + id;
    deleteBbsStmt.text = sql;
    try {
      deleteBbsStmt.execute();
      return this.air.trace("DELETE statement succeeded");
    } catch (_error) {
      erorr = _error;
      this.air.trace("Error message:", error.message);
      return this.air.trace("Details:", error.details);
    }
  };

  return Db;

})();
